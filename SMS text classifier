# Importing required libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the dataset
train_data = pd.read_csv('https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv', sep='\t', header=None)
train_data.columns = ['label', 'message']

# Splitting the data into train and test sets (if not already split)
X_train, X_test, y_train, y_test = train_test_split(train_data['message'], train_data['label'], test_size=0.2, random_state=42)

# Creating a pipeline that combines TfidfVectorizer and MultinomialNB
model = make_pipeline(TfidfVectorizer(), MultinomialNB())

# Training the model
model.fit(X_train, y_train)

# Evaluate the model
predictions = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, predictions)}")

# Defining the predict_message function
def predict_message(message):
    pred_proba = model.predict_proba([message])[0]
    pred_label = model.predict([message])[0]
    ham_proba = pred_proba[0]
    spam_proba = pred_proba[1]

    return [spam_proba, pred_label] if pred_label == 'spam' else [ham_proba, pred_label]

# Test the predict_message function
test_messages = ["Congratulations! You've won a $1,000 Walmart gift card. Go to http://bit.ly/123456 to claim now.",
                 "Hey, are we still up for lunch tomorrow?"]
for msg in test_messages:
    print(predict_message(msg))
